import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
months = ['January', 'February', 'March', 'April', 'May', 'June','All']
days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday','All']

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
      city = input("\nWhich city would you like to filter by?\n").lower()
      if city not in CITY_DATA:
        print("Invalid City. Try again.")
        continue
      else:
        break
            

    # get user input for month (all, january, february, ... , june)
    while True:
        month = input("\nWhich month would you like to filter by? type all if you do not have any preference?\n").title()
        if month not in months:
            print("Invalid Month! please use months in the following format: january, february, ...., june")
            continue
        else:
            break

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input("\nWould you like to filter with a particular weekday? type all if you do not have any preference.\n").title()

        if day not in days:
            print("Invalid Day! please use weekdays in the following format: friday, saturday, ...., thursday")
            continue
        else:
            break
    
    
              

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    #loading city file / Adjusting Start & End Time / Creating month, hour, trip, & day_of_week columns

    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['month'] = df['Start Time'].dt.month
    df['hour'] = df['Start Time'].dt.hour
    df['trip'] = df['Start Station'] + " to " + df['End Station']
    
    # filter by month if applicable
    if month != 'All':
        # use the index of the months list to get the corresponding int
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]


    # filter by day of week if applicable
    if day != 'All':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    popular_month = df['month'].mode()[0]
    print('Most Popular Month:', popular_month)

    # display the most common day of week
    popular_day = df['day_of_week'].mode()[0]
    print('Most Popular Day of the Week:', popular_day)

    # display the most common start hour
    popular_hour = df['hour'].mode()[0]

    print('Most Popular Hour:', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    start_station = df['Start Station'].mode()[0]
    print('Most Popular Start Station:', start_station)
    
    # display most commonly used end station
    end_station = df['End Station'].mode()[0]
    print('Most Popular End Station:', end_station)

    # display most frequent combination of start station and end station trip
    trip = df['trip'].mode()[0]
    print('Most Popular Start & End Station Trip:', trip)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel_time = df['Trip Duration'].sum()/120
    print('Total Travel Time in Hours: ',total_travel_time)
    # display mean travel time
    total_travel_time = df['Trip Duration'].mean()/60
    print('Average Travel Time in minutes: ',total_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df['User Type'].value_counts()
    print('User Type:', user_types)
    
    # Display counts of gender
    try:
        gender = df['Gender'].mode()[0]
        print('Most Common Gender:', gender)
    except:
        print('no gender data for this city')
        
    # Display earliest, most recent, and most common year of birth
    try: 
        earliest = int(df['Birth Year'].min())
        recent = int(df['Birth Year'].max())                                       
        common = int(df['Birth Year'].mode()[0])
        print('Earliest Year of Birth:', earliest)
        print('Most Recent Year of Birth:', recent)
        print('Most Common Year of Birth:', common)                                         
    except:
        print('no birth year data for this city')
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def show_lines(df):
    lines = 0
    print('\nDo you want to show few lines of the data? Yes/No\n')
    while input() == "yes":
        lines +=5
        print(df.iloc[lines - 5 : lines ])
        print('would you like to display more lines of the data? yes/no')

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        show_lines(df)
        
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
